/*
 * ma1sd - Matrix Identity Server Daemon
 * Copyright (C) 2017 Kamax Sarl
 *
 * https://www.kamax.io/
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.47.0'
}

import java.util.regex.Pattern

def confFileName = "ma1sd.example.yaml"
def distDir = "${project.buildDir}/dist"

def debBinPath = "/usr/lib/ma1sd"
def debConfPath = "/etc/ma1sd"
def debDataPath = "/var/lib/ma1sd"
def debSystemdPath = "/etc/systemd/system"

def debConfFileName = confFileName
def debStartScriptFilename = "ma1sd"

def debBuildBasePath = "${project.buildDir}/tmp/debian"
def debBuildDebianPath = "${debBuildBasePath}/DEBIAN"
def debBuildBinPath = "${debBuildBasePath}${debBinPath}"
def debBuildConfPath = "${debBuildBasePath}${debConfPath}"
def debBuildDataPath = "${debBuildBasePath}${debDataPath}"
def debBuildSystemdPath = "${debBuildBasePath}${debSystemdPath}"

def dockerImageName = "ma1uta/ma1sd"
def dockerImageTag = "${dockerImageName}:${ma1sdVersion()}"

group = 'io.kamax'
sourceCompatibility = '21'
targetCompatibility = '21'

application {
    mainClass = 'io.kamax.mxisd.MxisdStandaloneExec'
}

String ma1sdVersion() {
    def versionPattern = Pattern.compile("v(\\d+\\.)?(\\d+\\.)?(\\d+)(-.*)?")

    String version = System.getenv('MA1SD_BUILD_VERSION')
    if (version == null || version.size() == 0) {
        version = gitVersion()
    }
    return versionPattern.matcher(version).matches() ? version.substring(1) : version
}

String gitVersion() {
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    exec {
        commandLine = ['git', 'describe', '--tags', '--always', '--dirty']
        standardOutput = out
    }
    return out.toString().replace(System.lineSeparator(), '')
}

repositories {
    mavenCentral()
}

dependencies {
    // Logging
    api 'org.slf4j:slf4j-simple:2.0.9' // Updated

    // Easy file management
    api 'commons-io:commons-io:2.13.0' // Updated
    api 'commons-cli:commons-cli:1.5.0' // Updated

    // Config management
    api 'org.yaml:snakeyaml:2.0' // Updated

    // Connection Pool
    api 'com.mchange:c3p0:0.9.5.5' // new version unknown

    // Dependencies from old Matrix-java-sdk
    api 'org.apache.commons:commons-lang3:3.13.0' // Updated
    api 'com.squareup.okhttp3:okhttp:4.11.0' // Updated
    api 'commons-codec:commons-codec:1.16.0' // Updated

    // Gson for JSON parsing
    api 'com.google.code.gson:gson:2.8.9' // Updated

    // ORMLite
    api 'com.j256.ormlite:ormlite-jdbc:6.1' // Updated

    // ed25519 handling
    api 'net.i2p.crypto:eddsa:0.3.0' // No newer version available

    // LDAP connector
    api 'org.apache.directory.api:api-all:2.1.7' // Updated

    // DNS lookups
    api 'dnsjava:dnsjava:3.5.0' // Updated

    // HTTP connections
    api 'org.apache.httpcomponents.client5:httpclient5:5.2' // Updated to HttpClient5

    // Phone number validation
    api 'com.googlecode.libphonenumber:libphonenumber:8.13.11' // Updated

    // Email handling (Replaced `javax.mail` with `jakarta.mail`)
    api 'jakarta.mail:jakarta.mail-api:2.1.1'
}

jar {
    manifest {
        attributes(
            'Implementation-Version': ma1sdVersion()
        )
    }
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set('')
}

task debBuild(dependsOn: shadowJar) {
    doLast {
        String debVersion = ma1sdVersion()
        println "Version for package: ${debVersion}"
        mkdir distDir
        mkdir debBuildBasePath
        mkdir debBuildDebianPath
        mkdir debBuildBinPath
        mkdir debBuildConfPath
        mkdir debBuildDataPath
        mkdir debBuildSystemdPath

        copy {
            from "${project.buildDir}/libs/ma1sd.jar"
            into debBuildBinPath
        }

        copy {
            from "${project.file("src/script/" + debStartScriptFilename)}"
            into debBuildBinPath
        }

        copy {
            from(project.file(confFileName)) {
                rename confFileName, debConfFileName
            }
            into debBuildConfPath
        }

        ant.replaceregexp( // FIXME adapt to new config format
            file: "${debBuildConfPath}/${debConfFileName}",
            match: "key:\\R  path:(.*)",
            replace: "key:\n  path: '${debDataPath}/keys'"
        )

        ant.replaceregexp( // FIXME adapt to new config format
            file: "${debBuildConfPath}/${debConfFileName}",
            match: "storage:\\R  provider:\\R    sqlite:\\R      database:(.*)",
            replace: "storage:\n  provider:\n    sqlite:\n      database: '${debDataPath}/store.db'"
        )

        copy {
            from project.file('src/debian')
            into debBuildDebianPath
        }

        ant.replace(
            file: "${debBuildDebianPath}/control",
            token: 'Version: 0',
            value: "Version: ${debVersion}"
        )

        ant.replace(
            file: "${debBuildDebianPath}/postinst",
            token: '%DEB_DATA_DIR%',
            value: debDataPath
        )

        ant.replace(
            file: "${debBuildDebianPath}/postinst",
            token: '%DEB_CONF_FILE%',
            value: "${debConfPath}/ma1sd.yaml"
        )

        ant.chmod(
            file: "${debBuildDebianPath}/postinst",
            perm: '0755'
        )

        ant.chmod(
            file: "${debBuildDebianPath}/prerm",
            perm: 'a+x'
        )

        copy {
            from "${project.file('src/systemd/ma1sd.service')}"
            into debBuildSystemdPath
        }

        exec {
            commandLine(
                'fakeroot',
                'dpkg-deb',
                '-b',
                debBuildBasePath,
                "${project.buildDir}/dist"
            )
        }
    }
}

task dockerBuild(type: Exec) {
    commandLine 'docker', 'build', '-t', dockerImageTag, project.rootDir

    doLast {
        exec {
            commandLine 'docker', 'tag', dockerImageTag, "${dockerImageName}:latest-dev"
        }
    }
}

task dockerBuildX(type: Exec, dependsOn: shadowJar) {
    commandLine 'docker', 'buildx', 'build', '--push', '--platform', 'linux/arm64,linux/amd64,linux/arm/v7', '-t', dockerImageTag, project.rootDir
    doLast {
        exec {
            commandLine 'docker', 'buildx', 'build', '--push', '--platform', 'linux/arm64,linux/amd64,linux/arm/v7', '-t', "${dockerImageName}:latest-dev", project.rootDir
        }
    }
}

task dockerPush(type: Exec) {
    commandLine 'docker', 'push', dockerImageTag

    doLast {
        exec {
            commandLine 'docker', 'push', "${dockerImageName}:latest-dev"
        }
    }
}

task dockerPushX(type: Exec) {
    commandLine 'docker', 'push', dockerImageTag

    doLast {
        exec {
            commandLine 'docker', 'push', "${dockerImageName}:latest-dev"
            commandLine 'docker', 'push', "${dockerImageName}:latest-amd64-dev"
            commandLine 'docker', 'push', "${dockerImageName}:latest-arm64-dev"
        }
    }
}